#!/usr/bin/env python

import re
import subprocess
from gradelib import *

r = Runner(save("xv6.out"))

@test(40, "exit test")
def test_exit_test():
    subprocess.run(["make", "clean"])
    r.run_qemu(shell_script([
        'exittest'
    ]), make_args=["LAB_SYSCALL_TEST=on"])
    r.match('proc \\d+ exit, parent pid \\d+, name \\w+, state \\w+')
    r.match('proc \\d+ exit, child 0, pid \\d+, name \\w+, state \\w+')
    r.match('proc \\d+ exit, child 1, pid \\d+, name \\w+, state \\w+')
    r.match('proc \\d+ exit, child 2, pid \\d+, name \\w+, state \\w+')

@test(40, "wait test")
def test_wait_test():
    r.run_qemu(shell_script([
        'waittest'
    ]), make_args=["LAB_SYSCALL_TEST=on"])
    r.match('wait test OK')

@test(20, "yield test")
def test_yield_test():
    # Run QEMU and execute yieldtest twice, matching both outputs.
    r.run_qemu(shell_script([
        'yieldtest',
        'yieldtest'
    ]), make_args=["CPUS=1", "LAB_SYSCALL_TEST=on"])
    
    # Match the expected output for the first yieldtest
    r.match(
        'yield test',
        'parent yield',
        r'The currently runnable processes include those with PID 4 PID 5 PID 6',
        'Child with PID 4 begins to run',
        'Child with PID 5 begins to run',
        'Child with PID 6 begins to run',
        'parent yield finished'
    )
    
    # Match the expected output for the second yieldtest
    r.match(
        'yield test',
        'parent yield',
        r'The currently runnable processes include those with PID 8 PID 9 PID 10',
        'Child with PID 8 begins to run',
        'Child with PID 9 begins to run',
        'Child with PID 10 begins to run',
        'parent yield finished'
    )


run_tests()



